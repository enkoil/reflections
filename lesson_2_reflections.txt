What happens when you initialize a repository? Why do you need to do it?
     The .git hidden directory is created when you initialize a repository.
     A repository must be initialized before you can use the Git VC system
     withing a directory.

How is the staging area different from the working directory and the
repository? What value do you think it offers?
     The staging area is the step between the working directory and the
     repository. It is like a "test step" before actually creating a commit.
     Having a staging area allows you to double check which files are going to
     be added to a commit and offers the flexibility to remove files which may
     have been accidentally added before committing.

How can you use the staging area to make sure you have one commit per logical
change?
     Using the staging area along with the git diff command allows you to easily
     compare the changes made in different files before deciding to make a
     commit. You can review the changes and make sure they all relate to the
     same logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
     If you want to experiment with adding a new feature then having a branch
     would be helpful because you can continue to develop the main project while
     separately keeping track of any experimental changes made. Branches also
     make it easy to switch between experimental version and main versions of
     the project; just check out the branch you wish to use.

How do the diagrams help you visualize the branch structure?
     The diagrams make clear how different commits and branches are connected
     to each other. They can be more clear than the linear structure of
     git log because they are drawn in two dimensions, making very obvious the
     order of commits and the starting points of branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
     The two head files of each branch are merged with the commit before each
     branch split off serving as the "original file". The commit where the
     branches were merged has two parents, the old head commits of each branch.
     The diagram makes it clear which commits are still attached and will show
     up in git log and which (if any) become detached and lost.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
     Pros: Git figures out how best to put two files together and only requires
     intervention from the user in some cases. That saves time combing through
     separate versions of files to find the differences manually. When there is
     a merge git cannot complete it inserts nice markers to make it easy to
     find the merge conflict.
     Cons: The user must trust that git has merged files correctly and cannot be
     completely confident that the merged file is accurate without double-
     checking files after the merge. When solving a merge conflict it is
     important to remember to remove git's markers so that they do not become a
     bug in the code.
